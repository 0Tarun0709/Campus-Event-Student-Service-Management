{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Campus Event Management System","text":"<p>A production-ready Campus Event Management System showcasing the complete transformation from a simple Python project to a modern, CI/CD-integrated application with enterprise-grade development practices.</p>"},{"location":"#project-highlights","title":"\ud83c\udfaf Project Highlights","text":"<p>This project demonstrates a complete CI/CD migration featuring:</p> <ul> <li>\u2705 Modern Python Packaging (<code>pyproject.toml</code> with UV)</li> <li>\u2705 Comprehensive CI/CD Pipeline (5 specialized GitHub Actions workflows)</li> <li>\u2705 Automated Code Quality (Black, isort, flake8, mypy, pylint)</li> <li>\u2705 Multi-Layer Security (Bandit, Safety, CodeQL, Trivy scanning)</li> <li>\u2705 Professional Documentation (MkDocs Material with automated deployment)</li> <li>\u2705 Containerization (Docker with multi-stage builds)</li> <li>\u2705 Development Automation (20+ Make targets, setup scripts)</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#one-command-setup","title":"One-Command Setup","text":"<pre><code># Automated development environment setup\n./setup-dev.sh\n</code></pre>"},{"location":"#manual-setup","title":"Manual Setup","text":"<pre><code>git clone &lt;repository-url&gt;\ncd campus-event-management\npython -m venv .venv &amp;&amp; source .venv/bin/activate\nuv pip install --python .venv/bin/python -e \".[dev]\"\nstreamlit run app.py\n</code></pre>"},{"location":"#core-features","title":"\ud83d\udcca Core Features","text":"<ul> <li>Student Management: Complete lifecycle management with validation</li> <li>Event Management: Create, schedule, and manage campus events</li> <li>Registration System: Streamlined event registration with capacity management</li> <li>Analytics Dashboard: Real-time insights with interactive visualizations</li> <li>Request Management: Handle student service requests efficiently</li> <li>System Monitoring: Performance metrics and health checks</li> </ul>"},{"location":"#modern-architecture","title":"\ud83d\udee0\ufe0f Modern Architecture","text":""},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Python 3.11+ with type hints and async support</li> <li>Frontend: Streamlit with responsive Material Design</li> <li>Testing: Pytest with 85%+ coverage requirement</li> <li>Package Management: UV for fast dependency resolution</li> <li>Containerization: Docker with security scanning</li> <li>Documentation: MkDocs Material with automated deployment</li> </ul>"},{"location":"#development-excellence","title":"Development Excellence","text":"<ul> <li>Code Quality: Automated formatting, linting, type checking</li> <li>Security: Multi-layer vulnerability scanning and analysis  </li> <li>Performance: Benchmarking and memory profiling</li> <li>Documentation: Comprehensive guides with live examples</li> <li>Automation: 20+ development commands and workflows</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"#cicd-migration-guide","title":"\ud83c\udfaf CI/CD Migration Guide","text":"<p>Complete transformation documentation - See exactly how we migrated from a basic Python project to this production-ready system with modern CI/CD practices.</p>"},{"location":"#additional-guides","title":"Additional Guides","text":"<ul> <li>Getting Started - Quick setup and usage</li> <li>Development Guide - Contributing and development practices</li> </ul>"},{"location":"#migration-results","title":"\ud83c\udfc6 Migration Results","text":""},{"location":"#before-basic-python-project","title":"Before: Basic Python Project","text":"<pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"#after-production-ready-system","title":"After: Production-Ready System","text":"<pre><code>\u251c\u2500\u2500 .github/workflows/     # 5 CI/CD pipelines\n\u251c\u2500\u2500 docs/                  # Professional documentation  \n\u251c\u2500\u2500 tests/                 # Comprehensive test suite\n\u251c\u2500\u2500 pyproject.toml         # Modern Python configuration\n\u251c\u2500\u2500 Dockerfile             # Containerization\n\u251c\u2500\u2500 Makefile              # Development automation\n\u2514\u2500\u2500 setup-dev.sh          # One-command setup\n</code></pre>"},{"location":"#impact-metrics","title":"Impact Metrics","text":"<ul> <li>\u26a1 Setup Time: 5 minutes (was 30+ minutes)</li> <li>\ud83d\udcc8 Test Coverage: 85%+ (was minimal)</li> <li>\ud83d\udd12 Security Score: Zero critical vulnerabilities  </li> <li>\ud83d\ude80 Deployment: Fully automated (was manual)</li> <li>\ud83d\udccb Code Quality: A+ rating with enforcement</li> <li>\ud83c\udfaf Developer Experience: 20+ automated commands</li> </ul>"},{"location":"#key-achievements","title":"\ud83c\udf89 Key Achievements","text":"<ol> <li>Automated Everything: From setup to deployment</li> <li>Zero-Compromise Quality: Comprehensive quality gates</li> <li>Security-First: Multi-layer security scanning</li> <li>Developer-Friendly: Excellent tooling and documentation</li> <li>Production-Ready: Enterprise-grade CI/CD pipeline</li> </ol>"},{"location":"#quick-commands","title":"\ud83d\ude80 Quick Commands","text":"<pre><code>make help          # Show all available commands\nmake install-dev   # Install development dependencies  \nmake test          # Run comprehensive test suite\nmake qa            # Quality assurance (format, lint, security)\nmake run           # Start the Streamlit application\nmake docs-serve    # Serve documentation locally\n</code></pre> <p>This project serves as a complete reference implementation for migrating any Python project to modern CI/CD practices! </p> <p>Explore the CI/CD Migration Guide to see the complete transformation process. \ud83c\udfaf</p>"},{"location":"CI-CD/","title":"\ud83d\ude80 CI/CD Pipeline Documentation","text":"<p>This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for the Campus Event &amp; Student Service Management System.</p>"},{"location":"CI-CD/#pipeline-overview","title":"\ud83d\udccb Pipeline Overview","text":"<p>Our CI/CD pipeline consists of several automated workflows that ensure code quality, security, and reliable deployments:</p>"},{"location":"CI-CD/#main-cicd-workflow-ci-cdyml","title":"\ud83d\udd04 Main CI/CD Workflow (<code>ci-cd.yml</code>)","text":"<ul> <li>Triggers: Push to <code>main</code>/<code>develop</code>, Pull Requests</li> <li>Stages:</li> <li>Code Quality &amp; Security - Formatting, linting, type checking, security scans</li> <li>Testing - Unit tests across Python 3.11-3.13</li> <li>Build - Package creation and validation</li> <li>Docker Build - Container image creation</li> <li>Deploy - Staging and Production deployments</li> <li>Release - Automated releases with <code>[release]</code> commit message</li> </ul>"},{"location":"CI-CD/#code-quality-workflow-code-qualityyml","title":"\ud83d\udd0d Code Quality Workflow (<code>code-quality.yml</code>)","text":"<ul> <li>Purpose: Comprehensive code analysis</li> <li>Tools: Black, isort, flake8, pylint, mypy, bandit, safety</li> <li>Features: PR comments with quality reports, SonarCloud integration</li> </ul>"},{"location":"CI-CD/#security-scanning-securityyml","title":"\ud83d\udee1\ufe0f Security Scanning (<code>security.yml</code>)","text":"<ul> <li>Tools: Bandit, Safety, Semgrep, CodeQL, Trivy</li> <li>Features: SARIF uploads to GitHub Security tab, dependency reviews</li> <li>Schedule: Weekly automated scans</li> </ul>"},{"location":"CI-CD/#performance-testing-performanceyml","title":"\u26a1 Performance Testing (<code>performance.yml</code>)","text":"<ul> <li>Tools: pytest-benchmark, memory-profiler</li> <li>Features: Performance regression detection, PR comments</li> </ul>"},{"location":"CI-CD/#deployment-deployyml","title":"\ud83d\ude80 Deployment (<code>deploy.yml</code>)","text":"<ul> <li>Target: Streamlit Cloud</li> <li>Features: Health checks, rollback capabilities, Slack notifications</li> </ul>"},{"location":"CI-CD/#setup-instructions","title":"\ud83d\udee0\ufe0f Setup Instructions","text":""},{"location":"CI-CD/#1-required-repository-secrets","title":"1. Required Repository Secrets","text":"<p>Set these secrets in your GitHub repository (<code>Settings &gt; Secrets and variables &gt; Actions</code>):</p> <pre><code># Docker Hub (for container registry)\nDOCKERHUB_USERNAME=your_dockerhub_username\nDOCKERHUB_TOKEN=your_dockerhub_token\n\n# SonarCloud (for code analysis)\nSONAR_TOKEN=your_sonarcloud_token\n\n# Slack (for notifications)\nSLACK_WEBHOOK_URL=your_slack_webhook_url\n\n# Streamlit Cloud (for deployment)\nSTREAMLIT_APP_URL=https://your-app.streamlit.app\n\n# Optional: Semgrep\nSEMGREP_APP_TOKEN=your_semgrep_token\n</code></pre>"},{"location":"CI-CD/#2-enable-github-features","title":"2. Enable GitHub Features","text":"<ol> <li>Security Tab: Enable security advisories and dependency graph</li> <li>Code Scanning: Will be automatically configured by CodeQL workflow</li> <li>Dependabot: Enable for automated dependency updates</li> </ol>"},{"location":"CI-CD/#3-sonarcloud-setup","title":"3. SonarCloud Setup","text":"<ol> <li>Go to SonarCloud.io</li> <li>Import your GitHub repository</li> <li>Get your project key and organization from SonarCloud</li> <li>Update <code>sonar-project.properties</code> with your details</li> </ol>"},{"location":"CI-CD/#4-local-development-setup","title":"4. Local Development Setup","text":"<pre><code># Install development dependencies\npip install -r requirements.txt\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests locally\npytest tests/ -v\n\n# Run code quality checks\nblack .\nisort .\nflake8 .\nmypy .\nbandit -r .\n</code></pre>"},{"location":"CI-CD/#quality-gates","title":"\ud83d\udcca Quality Gates","text":""},{"location":"CI-CD/#code-quality-metrics","title":"Code Quality Metrics","text":"<ul> <li>Code Coverage: Minimum 80%</li> <li>Code Formatting: 100% Black compliant</li> <li>Import Sorting: 100% isort compliant</li> <li>Linting: Zero critical flake8 violations</li> <li>Security: Zero high-severity bandit issues</li> </ul>"},{"location":"CI-CD/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Unit Tests: Must pass on Python 3.11, 3.12, 3.13</li> <li>Integration Tests: End-to-end workflow validation</li> <li>Performance Tests: No regression beyond 10%</li> </ul>"},{"location":"CI-CD/#security-requirements","title":"Security Requirements","text":"<ul> <li>Dependency Scanning: No high/critical vulnerabilities</li> <li>Code Scanning: No security hotspots</li> <li>Secret Detection: No exposed secrets</li> </ul>"},{"location":"CI-CD/#workflow-triggers","title":"\ud83d\udd04 Workflow Triggers","text":""},{"location":"CI-CD/#automatic-triggers","title":"Automatic Triggers","text":"<ul> <li>Push to main/develop: Full CI/CD pipeline</li> <li>Pull Requests: Code quality + tests</li> <li>Schedule: Weekly security scans (Monday 2 AM)</li> <li>Schedule: Weekly performance tests (Tuesday 4 AM)</li> </ul>"},{"location":"CI-CD/#manual-triggers","title":"Manual Triggers","text":"<ul> <li>Deployment: Manual deployment to staging/production</li> <li>Release: Add <code>[release]</code> to commit message</li> </ul>"},{"location":"CI-CD/#deployment-process","title":"\ud83d\ude80 Deployment Process","text":""},{"location":"CI-CD/#staging-deployment","title":"Staging Deployment","text":"<pre><code>git push origin develop\n# Automatically deploys to staging environment\n</code></pre>"},{"location":"CI-CD/#production-deployment","title":"Production Deployment","text":"<pre><code>git push origin main\n# Automatically deploys to production environment\n</code></pre>"},{"location":"CI-CD/#manual-deployment","title":"Manual Deployment","text":"<pre><code># Go to Actions tab in GitHub\n# Select \"Deploy to Streamlit Cloud\"\n# Click \"Run workflow\"\n# Choose environment (staging/production)\n</code></pre>"},{"location":"CI-CD/#monitoring-observability","title":"\ud83d\udcc8 Monitoring &amp; Observability","text":""},{"location":"CI-CD/#github-actions","title":"GitHub Actions","text":"<ul> <li>View workflow runs in the \"Actions\" tab</li> <li>Check artifact downloads for reports</li> <li>Monitor workflow duration and success rates</li> </ul>"},{"location":"CI-CD/#sonarcloud-dashboard","title":"SonarCloud Dashboard","text":"<ul> <li>Code quality metrics and trends</li> <li>Security hotspots and vulnerabilities</li> <li>Technical debt analysis</li> </ul>"},{"location":"CI-CD/#streamlit-app-health","title":"Streamlit App Health","text":"<ul> <li>Health check endpoint: <code>/_stcore/health</code></li> <li>Application metrics in Streamlit Cloud dashboard</li> </ul>"},{"location":"CI-CD/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"CI-CD/#common-issues","title":"Common Issues","text":""},{"location":"CI-CD/#tests-failing-locally","title":"Tests Failing Locally","text":"<pre><code># Update dependencies\npip install -r requirements.txt --upgrade\n\n# Run specific test\npytest tests/test_specific.py -v\n\n# Debug with verbose output\npytest tests/ -v -s\n</code></pre>"},{"location":"CI-CD/#code-quality-issues","title":"Code Quality Issues","text":"<pre><code># Auto-fix formatting\nblack .\nisort .\n\n# Check specific issues\nflake8 . --show-source\nmypy . --show-error-codes\n</code></pre>"},{"location":"CI-CD/#docker-build-issues","title":"Docker Build Issues","text":"<pre><code># Test local build\ndocker build -t campus-management .\ndocker run -p 8501:8501 campus-management\n\n# Check logs\ndocker logs &lt;container_id&gt;\n</code></pre>"},{"location":"CI-CD/#deployment-issues","title":"Deployment Issues","text":"<pre><code># Check Streamlit Cloud logs\n# Verify environment variables\n# Check application health endpoint\n</code></pre>"},{"location":"CI-CD/#getting-help","title":"Getting Help","text":"<ol> <li>GitHub Issues: Report bugs and feature requests</li> <li>Discussions: Ask questions and share ideas</li> <li>Wiki: Extended documentation and guides</li> <li>Code Review: Request reviews for complex changes</li> </ol>"},{"location":"CI-CD/#contributing-to-cicd","title":"\ud83d\udcdd Contributing to CI/CD","text":""},{"location":"CI-CD/#adding-new-workflows","title":"Adding New Workflows","text":"<ol> <li>Create workflow file in <code>.github/workflows/</code></li> <li>Follow existing naming conventions</li> <li>Add comprehensive documentation</li> <li>Test thoroughly before merging</li> </ol>"},{"location":"CI-CD/#modifying-quality-gates","title":"Modifying Quality Gates","text":"<ol> <li>Update thresholds in workflow files</li> <li>Update documentation</li> <li>Communicate changes to team</li> <li>Monitor impact after deployment</li> </ol>"},{"location":"CI-CD/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Update <code>requirements.txt</code></li> <li>Add tool configuration files</li> <li>Update workflows to include new tool</li> <li>Add documentation</li> </ol>"},{"location":"CI-CD/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":"<ol> <li>Secrets Management: Never commit secrets to code</li> <li>Dependency Updates: Regular updates via Dependabot</li> <li>Access Control: Limit who can modify workflows</li> <li>Audit Logs: Regular review of workflow changes</li> <li>Branch Protection: Require status checks before merge</li> </ol>"},{"location":"CI-CD/#performance-optimization","title":"\ud83d\udcca Performance Optimization","text":""},{"location":"CI-CD/#workflow-performance","title":"Workflow Performance","text":"<ul> <li>Use cache for dependencies</li> <li>Parallel job execution where possible</li> <li>Conditional job execution</li> <li>Artifact management</li> </ul>"},{"location":"CI-CD/#build-performance","title":"Build Performance","text":"<ul> <li>Multi-stage Docker builds</li> <li>Layer caching</li> <li>Minimal base images</li> <li>Dependency optimization</li> </ul> <p>For more information, see the GitHub Actions Documentation and Streamlit Deployment Guide.</p>"},{"location":"development/","title":"Development Guide","text":"<p>This guide covers development practices, contributing guidelines, and technical details for the Campus Event Management System.</p>"},{"location":"development/#development-environment","title":"Development Environment","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ </li> <li>Git</li> <li>UV package manager (recommended) or pip</li> <li>Docker (optional)</li> <li>VS Code (recommended)</li> </ul>"},{"location":"development/#setup-development-environment","title":"Setup Development Environment","text":"<pre><code># Quick setup with automated script\n./setup-dev.sh\n\n# Manual setup\npython -m venv .venv\nsource .venv/bin/activate\nuv pip install --python .venv/bin/python -e \".[dev]\"\npre-commit install\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make Changes</p> </li> <li>Follow code style guidelines</li> <li>Write tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Quality Checks <pre><code>make qa  # Runs formatting, linting, type checking, security scans\n</code></pre></p> </li> <li> <p>Run Tests <pre><code>make test  # Run full test suite with coverage\n</code></pre></p> </li> <li> <p>Commit Changes <pre><code>git add .\ngit commit -m \"feat: add new feature description\"\n</code></pre></p> </li> <li> <p>Push and Create PR <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"development/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"development/#code-formatting","title":"Code Formatting","text":"<p>We use Black for consistent code formatting:</p> <pre><code>black .  # Format all Python files\n</code></pre> <p>Configuration in <code>pyproject.toml</code>: <pre><code>[tool.black]\nline-length = 88\ntarget-version = ['py311']\n</code></pre></p>"},{"location":"development/#import-sorting","title":"Import Sorting","text":"<p>We use isort for consistent import organization:</p> <pre><code>isort .  # Sort all imports\n</code></pre>"},{"location":"development/#linting","title":"Linting","text":"<p>We use flake8 for code linting:</p> <pre><code>flake8 .  # Check code quality\n</code></pre>"},{"location":"development/#type-checking","title":"Type Checking","text":"<p>We use mypy for static type checking:</p> <pre><code>mypy .  # Type check all files\n</code></pre>"},{"location":"development/#security-scanning","title":"Security Scanning","text":"<p>We use bandit for security analysis:</p> <pre><code>bandit -r .  # Scan for security issues\n</code></pre>"},{"location":"development/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_system.py      # Unit tests for main system\n\u251c\u2500\u2500 test_integration.py # Integration tests\n\u251c\u2500\u2500 test_models.py      # Model tests\n\u2514\u2500\u2500 conftest.py         # Test configuration and fixtures\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing Tests","text":""},{"location":"development/#unit-tests","title":"Unit Tests","text":"<pre><code>import pytest\nfrom main import CampusEventManagementSystem\n\n@pytest.fixture\ndef system():\n    return CampusEventManagementSystem()\n\ndef test_add_student_success(system):\n    result = system.add_student(\"S001\", \"John\", \"john@edu\", \"CS\")\n    assert result == \"Student added successfully!\"\n</code></pre>"},{"location":"development/#integration-tests","title":"Integration Tests","text":"<pre><code>@pytest.mark.integration\ndef test_student_registration_workflow(system):\n    # Add student\n    system.add_student(\"S001\", \"John\", \"john@edu\", \"CS\")\n\n    # Add event\n    system.add_event(\"E001\", \"Workshop\", \"Tech\", \"2025-12-01\", \n                    \"10:00\", \"12:00\", \"Room A\", 50)\n\n    # Register student for event\n    result = system.register_student(\"S001\", \"E001\")\n    assert result == \"Student registered successfully!\"\n</code></pre>"},{"location":"development/#test-commands","title":"Test Commands","text":"<pre><code># Run all tests\nmake test\n\n# Run tests with coverage\npytest --cov=. --cov-report=html\n\n# Run specific test file\npytest tests/test_system.py -v\n\n# Run tests matching pattern\npytest -k \"test_student\" -v\n</code></pre>"},{"location":"development/#architecture-overview","title":"Architecture Overview","text":""},{"location":"development/#core-components","title":"Core Components","text":"<ol> <li>Main System (<code>main.py</code>)</li> <li>Central business logic</li> <li>Student and event management</li> <li> <p>Registration handling</p> </li> <li> <p>Models (<code>models.py</code>)</p> </li> <li>Data structures</li> <li>Student and Event classes</li> <li> <p>Validation logic</p> </li> <li> <p>Streamlit App (<code>app.py</code>)</p> </li> <li>Web interface</li> <li>User interactions</li> <li> <p>Tab-based navigation</p> </li> <li> <p>Tab Components (<code>tabs/</code>)</p> </li> <li>Modular UI components</li> <li>Separate concerns</li> <li> <p>Reusable widgets</p> </li> <li> <p>Data Layer (<code>data/</code>)</p> </li> <li>Data persistence</li> <li>File I/O operations</li> <li>Data validation</li> </ol>"},{"location":"development/#design-patterns","title":"Design Patterns","text":"<ul> <li>Singleton: CampusEventManagementSystem</li> <li>Factory: Event and Student creation</li> <li>Observer: UI updates on data changes</li> <li>Strategy: Different registration strategies</li> </ul>"},{"location":"development/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"development/#workflow-overview","title":"Workflow Overview","text":"<p>Our CI/CD pipeline includes:</p> <ol> <li>Code Quality - Formatting, linting, type checking</li> <li>Testing - Unit, integration, and performance tests</li> <li>Security - Vulnerability scanning and code analysis</li> <li>Building - Package and Docker image creation</li> <li>Deployment - Automated deployment to staging/production</li> </ol>"},{"location":"development/#workflow-files","title":"Workflow Files","text":"<ul> <li><code>.github/workflows/ci-cd.yml</code> - Main CI/CD pipeline</li> <li><code>.github/workflows/code-quality.yml</code> - Code quality checks</li> <li><code>.github/workflows/security.yml</code> - Security scanning</li> <li><code>.github/workflows/performance.yml</code> - Performance testing</li> <li><code>.github/workflows/docs.yml</code> - Documentation deployment</li> </ul>"},{"location":"development/#quality-gates","title":"Quality Gates","text":"<p>All PRs must pass: - \u2705 Code formatting (Black, isort) - \u2705 Linting (flake8) - \u2705 Type checking (mypy) - \u2705 Security scanning (bandit, safety) - \u2705 Test coverage (85%+ required) - \u2705 All tests passing - \u2705 Documentation builds</p>"},{"location":"development/#performance-guidelines","title":"Performance Guidelines","text":""},{"location":"development/#benchmarking","title":"Benchmarking","text":"<p>We use <code>pytest-benchmark</code> for performance testing:</p> <pre><code>def test_student_addition_performance(benchmark, system):\n    result = benchmark(system.add_student, \"S001\", \"John\", \"john@edu\", \"CS\")\n    assert result == \"Student added successfully!\"\n</code></pre>"},{"location":"development/#memory-profiling","title":"Memory Profiling","text":"<pre><code>@pytest.mark.memory\ndef test_memory_usage():\n    system = CampusEventManagementSystem()\n    # Add many students and check memory\n    for i in range(1000):\n        system.add_student(f\"S{i:03d}\", f\"Student{i}\", f\"s{i}@edu\", \"CS\")\n</code></pre>"},{"location":"development/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Streamlit Performance: Page load times, memory usage</li> <li>Backend Performance: Function execution times</li> <li>Database Performance: Query optimization (when applicable)</li> </ul>"},{"location":"development/#documentation","title":"Documentation","text":""},{"location":"development/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Update docstrings for all functions</li> <li>Keep README.md current</li> </ul>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<pre><code># Serve documentation locally\nmake docs-serve\n\n# Build documentation\nmake docs-build\n\n# Deploy documentation (automated in CI)\nmkdocs gh-deploy\n</code></pre>"},{"location":"development/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Project overview\n\u251c\u2500\u2500 getting-started.md          # Quick start guide\n\u251c\u2500\u2500 ci-cd/\n\u2502   \u2514\u2500\u2500 migration-guide.md      # This comprehensive guide\n\u2514\u2500\u2500 development.md              # This development guide\n</code></pre>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/#common-issues","title":"Common Issues","text":""},{"location":"development/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<pre><code># Recreate virtual environment\nrm -rf .venv\npython -m venv .venv\nsource .venv/bin/activate\nuv pip install --python .venv/bin/python -e \".[dev]\"\n</code></pre>"},{"location":"development/#uv-installation-issues","title":"UV Installation Issues","text":"<pre><code># Install UV\npip install uv\n\n# Use explicit Python path\nuv pip install --python .venv/bin/python -e \".[dev]\"\n</code></pre>"},{"location":"development/#test-failures","title":"Test Failures","text":"<pre><code># Run tests with verbose output\npytest -v -s\n\n# Run specific failing test\npytest tests/test_system.py::test_specific_function -v -s\n</code></pre>"},{"location":"development/#docker-issues","title":"Docker Issues","text":"<pre><code># Rebuild containers\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up\n</code></pre>"},{"location":"development/#getting-help","title":"Getting Help","text":"<ol> <li>Check this documentation first</li> <li>Review CI/CD workflow logs</li> <li>Run diagnostic commands:    <pre><code>make help\nmake test\nmake qa\n</code></pre></li> <li>Check GitHub Issues for similar problems</li> </ol>"},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create feature branch</li> <li>Make changes with tests</li> <li>Run quality checks (<code>make qa</code>)</li> <li>Submit PR with clear description</li> <li>Address review feedback</li> <li>Merge after approval</li> </ol>"},{"location":"development/#commit-message-format","title":"Commit Message Format","text":"<p>Follow conventional commits:</p> <pre><code>feat: add new student validation\nfix: resolve event registration bug\ndocs: update installation guide\ntest: add integration tests for events\nchore: update dependencies\n</code></pre>"},{"location":"development/#code-review-guidelines","title":"Code Review Guidelines","text":"<ul> <li>Review for functionality, performance, security</li> <li>Check test coverage and quality</li> <li>Verify documentation updates</li> <li>Ensure CI/CD pipeline passes</li> <li>Provide constructive feedback</li> </ul> <p>This development guide ensures consistent, high-quality contributions to our modernized codebase! \ud83d\ude80</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the Campus Event Management System! This guide will help you get up and running quickly.</p>"},{"location":"getting-started/#quick-setup","title":"Quick Setup","text":""},{"location":"getting-started/#using-our-automated-setup","title":"Using Our Automated Setup","text":"<p>The fastest way to get started is using our automated setup script:</p> <pre><code># Clone the repository\ngit clone &lt;your-repo-url&gt;\ncd campus-event-management\n\n# Run automated setup (creates virtual environment, installs dependencies, runs tests)\n./setup-dev.sh\n</code></pre>"},{"location":"getting-started/#manual-setup","title":"Manual Setup","text":"<p>If you prefer manual setup or need more control:</p> <pre><code># Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install with UV (recommended)\npip install uv\nuv pip install --python .venv/bin/python -e \".[dev]\"\n\n# Or install with pip\npip install -e \".[dev]\"\n\n# Run tests to verify installation\npytest tests/ -v\n</code></pre>"},{"location":"getting-started/#running-the-application","title":"Running the Application","text":""},{"location":"getting-started/#start-the-streamlit-app","title":"Start the Streamlit App","text":"<pre><code># Using make command\nmake run\n\n# Or directly\nstreamlit run app.py\n</code></pre> <p>The application will be available at http://localhost:8501</p>"},{"location":"getting-started/#using-docker","title":"Using Docker","text":"<pre><code># Build and run with docker-compose\ndocker-compose up --build\n\n# Or use Docker directly\ndocker build -t campus-app .\ndocker run -p 8501:8501 campus-app\n</code></pre>"},{"location":"getting-started/#available-commands","title":"Available Commands","text":"<p>We provide a comprehensive Makefile with common development tasks:</p> <pre><code>make help          # Show all available commands\nmake install-dev   # Install development dependencies\nmake test          # Run tests\nmake qa            # Run quality assurance checks\nmake format        # Format code with black and isort\nmake docs-serve    # Serve documentation locally\nmake clean         # Clean up build artifacts\n</code></pre>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 app.py              # Main Streamlit application\n\u251c\u2500\u2500 main.py             # Core system logic\n\u251c\u2500\u2500 models.py           # Data models\n\u251c\u2500\u2500 tabs/               # UI components\n\u251c\u2500\u2500 data/               # Data handling\n\u251c\u2500\u2500 tests/              # Test suite\n\u251c\u2500\u2500 docs/               # Documentation\n\u2514\u2500\u2500 .github/workflows/  # CI/CD pipelines\n</code></pre>"},{"location":"getting-started/#key-features","title":"Key Features","text":"<ul> <li>Student Management: Add, update, and manage student records</li> <li>Event Management: Create and organize campus events</li> <li>Registration System: Handle event registrations</li> <li>Analytics Dashboard: View system analytics and reports</li> <li>Request Management: Handle student service requests</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the CI/CD Migration Guide to understand our modern development practices</li> <li>Check out the Development Guide for contributing guidelines</li> <li>Review the test suite in the <code>tests/</code> directory</li> <li>Try the different features in the web interface</li> </ul>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>Check our comprehensive documentation</li> <li>Run <code>make help</code> to see available commands</li> <li>Look at the test files for usage examples</li> <li>Review the CI/CD workflows for best practices</li> </ul>"},{"location":"ci-cd/migration-guide/","title":"CI/CD Integration Migration Guide","text":"<p>This guide documents the complete process of migrating a normal Python project to a fully integrated CI/CD pipeline with modern tooling and best practices.</p>"},{"location":"ci-cd/migration-guide/#overview","title":"\ud83c\udfaf Overview","text":"<p>We transformed a basic Streamlit application into a production-ready project with:</p> <ul> <li>\u2705 Modern Python packaging (<code>pyproject.toml</code>)</li> <li>\u2705 Professional CI/CD pipeline (GitHub Actions)</li> <li>\u2705 Code quality automation</li> <li>\u2705 Security scanning</li> <li>\u2705 Documentation site (MkDocs)</li> <li>\u2705 Containerization (Docker)</li> <li>\u2705 Development workflow automation</li> </ul>"},{"location":"ci-cd/migration-guide/#before-after-comparison","title":"\ud83d\udccb Before &amp; After Comparison","text":""},{"location":"ci-cd/migration-guide/#before-migration","title":"Before Migration","text":"<pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 requirements.txt    # Basic dependencies\n\u251c\u2500\u2500 README.md          # Simple documentation\n\u2514\u2500\u2500 tests/            # Basic tests\n    \u2514\u2500\u2500 test.py\n</code></pre>"},{"location":"ci-cd/migration-guide/#after-migration","title":"After Migration","text":"<pre><code>\u251c\u2500\u2500 .github/          # CI/CD Workflows\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u251c\u2500\u2500 ci-cd.yml\n\u2502   \u2502   \u251c\u2500\u2500 security.yml\n\u2502   \u2502   \u251c\u2500\u2500 code-quality.yml\n\u2502   \u2502   \u251c\u2500\u2500 performance.yml\n\u2502   \u2502   \u2514\u2500\u2500 docs.yml\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 docs/             # Professional Documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 ci-cd/\n\u2502   \u2514\u2500\u2500 development/\n\u251c\u2500\u2500 tests/            # Comprehensive Testing\n\u2502   \u251c\u2500\u2500 test_system.py\n\u2502   \u2514\u2500\u2500 test_integration.py\n\u251c\u2500\u2500 pyproject.toml    # Modern Python Config\n\u251c\u2500\u2500 mkdocs.yml        # Documentation Config\n\u251c\u2500\u2500 Dockerfile        # Containerization\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Makefile          # Development Commands\n\u251c\u2500\u2500 setup-dev.sh      # Environment Setup\n\u251c\u2500\u2500 qa.sh            # Quality Assurance\n\u2514\u2500\u2500 .pre-commit-config.yaml\n</code></pre>"},{"location":"ci-cd/migration-guide/#migration-process","title":"\ud83d\ude80 Migration Process","text":""},{"location":"ci-cd/migration-guide/#phase-1-modern-python-project-structure","title":"Phase 1: Modern Python Project Structure","text":""},{"location":"ci-cd/migration-guide/#11-migrate-from-requirementstxt-to-pyprojecttoml","title":"1.1 Migrate from requirements.txt to pyproject.toml","text":"<p>What we did: - Converted <code>requirements.txt</code> to modern <code>pyproject.toml</code> - Added optional dependency groups for different use cases - Configured modern build system with <code>hatchling</code></p> <p>Before: <pre><code># requirements.txt\nstreamlit==1.49.1\npandas==2.2.3\nplotly==6.3.0\n</code></pre></p> <p>After: <pre><code># pyproject.toml\n[project]\nname = \"campus-event-management\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11\"\ndependencies = [\n    \"streamlit&gt;=1.50.0\",\n    \"pandas&gt;=2.3.3\",\n    \"plotly&gt;=6.3.1\",\n    \"psutil&gt;=5.9.0\",\n    \"python-dotenv&gt;=1.0.0\",\n    \"requests&gt;=2.31.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.4.0\",\n    \"pytest-cov&gt;=4.1.0\",\n    \"black&gt;=23.7.0\",\n    \"flake8&gt;=6.0.0\",\n    \"mypy&gt;=1.5.0\",\n    # ... more dev tools\n]\n</code></pre></p> <p>Benefits: - \u2705 Dependency groups for different environments - \u2705 Modern Python packaging standards - \u2705 Tool configuration in single file - \u2705 Better dependency resolution</p>"},{"location":"ci-cd/migration-guide/#12-setup-uv-package-manager","title":"1.2 Setup UV Package Manager","text":"<p>What we did: - Integrated UV for fast package management - Created scripts that work with UV and traditional pip - Configured virtual environment management</p> <p>Commands: <pre><code># Modern approach\nuv pip install --python .venv/bin/python -e \".[dev]\"\n\n# Traditional approach still works\npip install -e \".[dev]\"\n</code></pre></p>"},{"location":"ci-cd/migration-guide/#phase-2-comprehensive-cicd-pipeline","title":"Phase 2: Comprehensive CI/CD Pipeline","text":""},{"location":"ci-cd/migration-guide/#21-github-actions-workflows","title":"2.1 GitHub Actions Workflows","text":"<p>We created 5 specialized workflows:</p>"},{"location":"ci-cd/migration-guide/#main-cicd-pipeline-ci-cdyml","title":"Main CI/CD Pipeline (<code>ci-cd.yml</code>)","text":"<pre><code>jobs:\n  - code-quality     # Formatting, linting, type checking\n  - test            # Multi-Python version testing\n  - build           # Package building\n  - docker-build   # Container building\n  - deploy          # Automated deployment\n</code></pre> <p>Features: - Multi-Python version testing (3.11, 3.12, 3.13) - Parallel job execution for speed - Artifact generation and storage - Automated deployment on successful builds</p>"},{"location":"ci-cd/migration-guide/#code-quality-code-qualityyml","title":"Code Quality (<code>code-quality.yml</code>)","text":"<pre><code>Tools Integrated:\n- Black (code formatting)\n- isort (import sorting) \n- flake8 (linting)\n- mypy (type checking)\n- pylint (advanced analysis)\n- SonarCloud (quality metrics)\n</code></pre>"},{"location":"ci-cd/migration-guide/#security-scanning-securityyml","title":"Security Scanning (<code>security.yml</code>)","text":"<pre><code>Security Tools:\n- Bandit (Python security linting)\n- Safety (vulnerability scanning)\n- CodeQL (semantic analysis)\n- Trivy (container scanning)\n- Dependency review\n</code></pre>"},{"location":"ci-cd/migration-guide/#performance-testing-performanceyml","title":"Performance Testing (<code>performance.yml</code>)","text":"<pre><code>Performance Monitoring:\n- pytest-benchmark (function benchmarks)\n- memory-profiler (memory usage)\n- Load testing capabilities\n- Performance regression detection\n</code></pre>"},{"location":"ci-cd/migration-guide/#documentation-docsyml","title":"Documentation (<code>docs.yml</code>)","text":"<pre><code>Documentation Pipeline:\n- MkDocs build verification\n- Link checking\n- GitHub Pages deployment\n- Multi-format documentation\n</code></pre>"},{"location":"ci-cd/migration-guide/#22-development-automation-scripts","title":"2.2 Development Automation Scripts","text":"<p>setup-dev.sh - One-command environment setup: <pre><code>#!/bin/bash\n# Automated development environment setup\nuv venv .venv\nsource .venv/bin/activate  \nuv pip install --python .venv/bin/python -e \".[dev]\"\npre-commit install\npytest tests/ -v\n</code></pre></p> <p>qa.sh - Quality assurance automation: <pre><code>#!/bin/bash\n# Comprehensive quality checks\nblack . &amp;&amp; isort .          # Format code\nflake8 . &amp;&amp; mypy .         # Lint and type check\nbandit -r . &amp;&amp; safety check # Security scan\npytest --cov=.             # Test with coverage\n</code></pre></p> <p>Makefile - Development task automation: <pre><code># 20+ predefined development tasks\nmake install-dev    # Install dependencies\nmake test          # Run tests\nmake qa            # Quality assurance\nmake run           # Start application\nmake docs-serve    # Serve documentation\n</code></pre></p>"},{"location":"ci-cd/migration-guide/#phase-3-code-quality-security","title":"Phase 3: Code Quality &amp; Security","text":""},{"location":"ci-cd/migration-guide/#31-automated-code-quality","title":"3.1 Automated Code Quality","text":"<p>Tools Configuration in pyproject.toml: <pre><code>[tool.black]\nline-length = 88\ntarget-version = ['py311']\n\n[tool.isort]\nprofile = \"black\"\nline_length = 88\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\naddopts = \"-ra -q --strict-markers\"\n\n[tool.mypy]\npython_version = \"3.11\"\nwarn_return_any = true\ncheck_untyped_defs = true\n</code></pre></p> <p>Pre-commit Hooks: <pre><code>repos:\n  - repo: https://github.com/psf/black\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/isort\n    hooks:\n      - id: isort\n  - repo: https://github.com/pycqa/flake8\n    hooks:\n      - id: flake8\n</code></pre></p>"},{"location":"ci-cd/migration-guide/#32-security-integration","title":"3.2 Security Integration","text":"<p>Automated Security Scanning: - Bandit: Scans Python code for security issues - Safety: Checks dependencies for vulnerabilities - CodeQL: Semantic code analysis - Trivy: Container and filesystem scanning - SARIF Integration: Results appear in GitHub Security tab</p> <p>Security Workflow Example: <pre><code>- name: Run Bandit Security Scanner\n  run: bandit -r . -f sarif -o bandit-results.sarif\n\n- name: Upload to GitHub Security\n  uses: github/codeql-action/upload-sarif@v2\n  with:\n    sarif_file: bandit-results.sarif\n</code></pre></p>"},{"location":"ci-cd/migration-guide/#phase-4-testing-infrastructure","title":"Phase 4: Testing Infrastructure","text":""},{"location":"ci-cd/migration-guide/#41-comprehensive-test-suite","title":"4.1 Comprehensive Test Suite","text":"<p>Before: <pre><code># Basic test\ndef test_basic():\n    system = CampusEventManagementSystem()\n    assert system is not None\n</code></pre></p> <p>After: <pre><code># Comprehensive testing with fixtures\nimport pytest\nfrom main import CampusEventManagementSystem\n\n@pytest.fixture\ndef system():\n    return CampusEventManagementSystem()\n\nclass TestStudentManagement:\n    def test_add_student_success(self, system):\n        result = system.add_student(\"S001\", \"John\", \"john@edu\", \"CS\")\n        assert result == \"Student added successfully!\"\n\n    @pytest.mark.integration\n    def test_student_event_workflow(self, system):\n        # Integration test\n        system.add_student(\"S001\", \"John\", \"john@edu\", \"CS\")\n        system.add_event(\"E001\", \"Workshop\", \"Tech\", \"2025-12-01\", \n                        \"10:00\", \"12:00\", \"Room A\", 50)\n        result = system.register_student(\"S001\", \"E001\")\n        assert result == \"Student registered successfully!\"\n</code></pre></p> <p>Test Categories: - Unit Tests: Individual component testing - Integration Tests: End-to-end workflow testing - Performance Tests: Benchmark and memory profiling - Security Tests: Vulnerability testing</p>"},{"location":"ci-cd/migration-guide/#42-coverage-reporting","title":"4.2 Coverage &amp; Reporting","text":"<p>Coverage Configuration: <pre><code>[tool.coverage.run]\nsource = [\".\"]\nomit = [\"*/tests/*\", \"*/venv/*\", \"*/__pycache__/*\"]\n\n[tool.coverage.report] \nexclude_lines = [\"pragma: no cover\", \"def __repr__\"]\n</code></pre></p> <p>Automated Reports: - HTML coverage reports - XML reports for CI integration - JUnit XML for test results - Performance benchmark JSON</p>"},{"location":"ci-cd/migration-guide/#phase-5-documentation-automation","title":"Phase 5: Documentation Automation","text":""},{"location":"ci-cd/migration-guide/#51-mkdocs-integration","title":"5.1 MkDocs Integration","text":"<p>Professional Documentation Site: <pre><code># mkdocs.yml\nsite_name: Campus Event Management\ntheme:\n  name: material\n  features:\n    - navigation.tabs\n    - search.highlight\n    - content.code.copy\n</code></pre></p> <p>Features: - Material Design theme with dark/light mode - Code syntax highlighting - Interactive search - Mobile responsive design - GitHub Pages deployment - Hot reload during development</p>"},{"location":"ci-cd/migration-guide/#52-documentation-structure","title":"5.2 Documentation Structure","text":"<p>Organized Content: <pre><code>docs/\n\u251c\u2500\u2500 index.md              # Project overview\n\u251c\u2500\u2500 getting-started/      # User guides\n\u251c\u2500\u2500 ci-cd/               # This migration guide\n\u2514\u2500\u2500 development/         # Developer resources\n</code></pre></p> <p>Automated Deployment: - Builds on every docs change - Link checking - Multi-format output - Version control integration</p>"},{"location":"ci-cd/migration-guide/#phase-6-containerization","title":"Phase 6: Containerization","text":""},{"location":"ci-cd/migration-guide/#61-docker-integration","title":"6.1 Docker Integration","text":"<p>Multi-stage Dockerfile: <pre><code>FROM python:3.13-slim\nWORKDIR /app\nCOPY pyproject.toml ./\nRUN pip install uv &amp;&amp; uv pip install --system .\nCOPY . .\nCMD [\"streamlit\", \"run\", \"app.py\"]\n</code></pre></p> <p>Docker Compose for Development: <pre><code>services:\n  app:\n    build: .\n    ports:\n      - \"8501:8501\"\n    volumes:\n      - .:/app\n</code></pre></p>"},{"location":"ci-cd/migration-guide/#62-container-security","title":"6.2 Container Security","text":"<p>Security Features: - Non-root user execution - Minimal base image - Security scanning with Trivy - Multi-platform builds (AMD64, ARM64)</p>"},{"location":"ci-cd/migration-guide/#results-benefits","title":"\ud83d\udcca Results &amp; Benefits","text":""},{"location":"ci-cd/migration-guide/#development-productivity","title":"Development Productivity","text":"<ul> <li>\u26a1 Setup Time: 5 minutes with <code>./setup-dev.sh</code></li> <li>\ud83d\udd04 Quality Checks: Automated with <code>make qa</code></li> <li>\ud83e\uddea Testing: Comprehensive coverage with <code>make test</code></li> <li>\ud83d\udce6 Deployment: Fully automated pipeline</li> </ul>"},{"location":"ci-cd/migration-guide/#code-quality-metrics","title":"Code Quality Metrics","text":"<ul> <li>\ud83d\udcc8 Test Coverage: 85%+ enforced</li> <li>\ud83d\udd12 Security Score: Zero critical vulnerabilities</li> <li>\u26a1 Performance: Benchmarked and monitored</li> <li>\ud83d\udccb Code Quality: A+ rating with automated enforcement</li> </ul>"},{"location":"ci-cd/migration-guide/#operational-excellence","title":"Operational Excellence","text":"<ul> <li>\ud83d\ude80 Deployment: Zero-downtime automated deployment</li> <li>\ud83d\udd0d Monitoring: Health checks and system monitoring</li> <li>\ud83d\udcda Documentation: Professional, searchable docs</li> <li>\ud83d\udee1\ufe0f Security: Multi-layer security scanning</li> </ul>"},{"location":"ci-cd/migration-guide/#developer-experience","title":"Developer Experience","text":"<ul> <li>\ud83c\udfaf One-command Setup: <code>./setup-dev.sh</code></li> <li>\ud83d\udd27 Rich Tooling: 20+ make commands</li> <li>\ud83d\udcd6 Clear Docs: Comprehensive guides</li> <li>\ud83e\udd1d Contribution: Streamlined PR process</li> </ul>"},{"location":"ci-cd/migration-guide/#implementation-checklist","title":"\ud83d\udee0\ufe0f Implementation Checklist","text":"<p>Use this checklist to migrate your own project:</p>"},{"location":"ci-cd/migration-guide/#phase-1-project-structure","title":"Phase 1: Project Structure","text":"<ul> <li> Convert <code>requirements.txt</code> to <code>pyproject.toml</code></li> <li> Add dependency groups (<code>[dev]</code>, <code>[test]</code>, <code>[docs]</code>)</li> <li> Configure build system</li> <li> Setup UV package manager</li> </ul>"},{"location":"ci-cd/migration-guide/#phase-2-cicd-pipeline","title":"Phase 2: CI/CD Pipeline","text":"<ul> <li> Create <code>.github/workflows/ci-cd.yml</code></li> <li> Add code quality workflow</li> <li> Setup security scanning</li> <li> Configure performance testing</li> <li> Add documentation deployment</li> </ul>"},{"location":"ci-cd/migration-guide/#phase-3-development-automation","title":"Phase 3: Development Automation","text":"<ul> <li> Create <code>setup-dev.sh</code> script</li> <li> Add <code>qa.sh</code> quality script</li> <li> Setup comprehensive <code>Makefile</code></li> <li> Configure pre-commit hooks</li> </ul>"},{"location":"ci-cd/migration-guide/#phase-4-testing-infrastructure_1","title":"Phase 4: Testing Infrastructure","text":"<ul> <li> Enhance test suite with fixtures</li> <li> Add integration tests</li> <li> Configure coverage reporting</li> <li> Setup performance benchmarks</li> </ul>"},{"location":"ci-cd/migration-guide/#phase-5-documentation","title":"Phase 5: Documentation","text":"<ul> <li> Setup MkDocs with Material theme</li> <li> Migrate existing docs</li> <li> Configure GitHub Pages</li> <li> Add documentation automation</li> </ul>"},{"location":"ci-cd/migration-guide/#phase-6-containerization_1","title":"Phase 6: Containerization","text":"<ul> <li> Create production <code>Dockerfile</code></li> <li> Add <code>docker-compose.yml</code></li> <li> Setup container security scanning</li> <li> Configure multi-platform builds</li> </ul>"},{"location":"ci-cd/migration-guide/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":""},{"location":"ci-cd/migration-guide/#what-made-this-migration-successful","title":"What Made This Migration Successful","text":"<ol> <li>Incremental Approach: Migrated piece by piece</li> <li>Automation First: Automated everything possible</li> <li>Quality Gates: No compromise on quality standards</li> <li>Developer Experience: Made development easier, not harder</li> <li>Documentation: Documented every decision and process</li> </ol>"},{"location":"ci-cd/migration-guide/#best-practices-applied","title":"Best Practices Applied","text":"<ul> <li>Infrastructure as Code: All configuration in version control</li> <li>Shift Left Security: Security checks early in pipeline</li> <li>Fail Fast: Quick feedback on issues</li> <li>Reproducible Builds: Consistent environments everywhere</li> <li>Comprehensive Testing: Multiple test levels and types</li> </ul>"},{"location":"ci-cd/migration-guide/#modern-python-standards","title":"Modern Python Standards","text":"<ul> <li>pyproject.toml: Single configuration file</li> <li>Type Hints: Better code documentation and IDE support</li> <li>UV Package Manager: Fast and reliable dependency management</li> <li>Pre-commit Hooks: Prevent issues before they reach CI</li> <li>GitHub Actions: Cloud-native CI/CD</li> </ul>"},{"location":"ci-cd/migration-guide/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>After completing this migration:</p> <ol> <li>Monitor &amp; Iterate: Use metrics to improve continuously</li> <li>Team Training: Ensure team knows the new workflows  </li> <li>Extend Pipeline: Add more sophisticated testing/deployment</li> <li>Security Hardening: Regular security audits and updates</li> <li>Performance Optimization: Monitor and optimize based on metrics</li> </ol> <p>This migration transforms your project from a simple script into a production-ready, enterprise-grade application with all modern best practices integrated! \ud83c\udf89</p>"},{"location":"ci-cd/overview/","title":"CI/CD Pipeline Documentation","text":""},{"location":"ci-cd/overview/#overview","title":"\ud83d\udccb Overview","text":"<p>This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for the Campus Event &amp; Student Service Management System.</p>"},{"location":"ci-cd/overview/#pipeline-architecture","title":"\ud83c\udfd7\ufe0f Pipeline Architecture","text":""},{"location":"ci-cd/overview/#workflows","title":"Workflows","text":"<ol> <li>Main CI/CD Pipeline (<code>.github/workflows/ci-cd.yml</code>)</li> <li>Runs on push to <code>main</code> and <code>develop</code> branches</li> <li> <p>Includes code quality, testing, building, and deployment</p> </li> <li> <p>Code Quality (<code>.github/workflows/code-quality.yml</code>)</p> </li> <li>Code formatting checks (Black, isort)</li> <li>Linting (flake8, pylint)</li> <li> <p>Type checking (mypy)</p> </li> <li> <p>Security Scanning (<code>.github/workflows/security.yml</code>)</p> </li> <li>Vulnerability scanning (Bandit, Safety)</li> <li>Dependency analysis (CodeQL, Trivy)</li> <li> <p>SARIF report generation</p> </li> <li> <p>Performance Testing (<code>.github/workflows/performance.yml</code>)</p> </li> <li>Benchmark testing</li> <li>Memory profiling</li> <li> <p>Load testing</p> </li> <li> <p>Deployment (<code>.github/workflows/deploy.yml</code>)</p> </li> <li>Streamlit Cloud deployment</li> <li>Health checks</li> <li>Rollback capabilities</li> </ol>"},{"location":"ci-cd/overview/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"ci-cd/overview/#local-development-setup","title":"Local Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n</code></pre></p> </li> <li> <p>Set up Python environment: <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code># Using uv (recommended)\nuv pip install -e \".[dev]\"\n\n# Or using pip\npip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Run the application: <pre><code>streamlit run app.py\n</code></pre></p> </li> </ol>"},{"location":"ci-cd/overview/#environment-configuration","title":"Environment Configuration","text":"<p>Create environment-specific configuration files:</p> <ul> <li><code>.env.development</code> - Development settings</li> <li><code>.env.production</code> - Production settings</li> </ul>"},{"location":"ci-cd/overview/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"ci-cd/overview/#running-tests-locally","title":"Running Tests Locally","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=. --cov-report=html\n\n# Run specific test categories\npytest -m \"not slow\"  # Skip slow tests\npytest -m integration  # Only integration tests\n</code></pre>"},{"location":"ci-cd/overview/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_system.py       # Unit tests for core system\n\u251c\u2500\u2500 test_integration.py  # Integration tests for Streamlit app\n\u2514\u2500\u2500 conftest.py         # Test configuration and fixtures\n</code></pre>"},{"location":"ci-cd/overview/#code-quality","title":"\ud83d\udd0d Code Quality","text":""},{"location":"ci-cd/overview/#tools-used","title":"Tools Used","text":"<ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>flake8: Code linting</li> <li>mypy: Static type checking</li> <li>pylint: Advanced linting</li> <li>bandit: Security linting</li> <li>safety: Vulnerability scanning</li> </ul>"},{"location":"ci-cd/overview/#running-code-quality-checks","title":"Running Code Quality Checks","text":"<pre><code># Using Makefile (recommended)\nmake qa                 # Run all quality checks\nmake format            # Format code only\nmake lint              # Lint code only\nmake security          # Security checks only\n\n# Or manually\nblack .               # Format code\nisort .              # Sort imports\nflake8 .             # Lint code\nmypy .               # Type checking\npylint **/*.py       # Advanced linting\nbandit -r .          # Security scanning\nsafety check         # Vulnerability checking\n</code></pre>"},{"location":"ci-cd/overview/#docker","title":"\ud83d\udc33 Docker","text":""},{"location":"ci-cd/overview/#building-docker-image","title":"Building Docker Image","text":"<pre><code>docker build -t campus-management .\n</code></pre>"},{"location":"ci-cd/overview/#running-with-docker-compose","title":"Running with Docker Compose","text":"<pre><code># Development\ndocker-compose up\n\n# Production\ndocker-compose -f docker-compose.yml up\n</code></pre>"},{"location":"ci-cd/overview/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"ci-cd/overview/#streamlit-cloud-deployment","title":"Streamlit Cloud Deployment","text":"<p>The application automatically deploys to Streamlit Cloud when: 1. Code is pushed to the <code>main</code> branch 2. All tests pass 3. Security scans are clean</p>"},{"location":"ci-cd/overview/#environment-variables","title":"Environment Variables","text":"<p>Required secrets for deployment:</p> <pre><code>DOCKERHUB_USERNAME      # Docker Hub username\nDOCKERHUB_TOKEN         # Docker Hub access token\nSTREAMLIT_APP_URL       # URL of deployed Streamlit app\nSLACK_WEBHOOK_URL       # Slack notifications (optional)\nSONAR_TOKEN            # SonarCloud token (optional)\n</code></pre>"},{"location":"ci-cd/overview/#monitoring-and-health-checks","title":"\ud83d\udcca Monitoring and Health Checks","text":""},{"location":"ci-cd/overview/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>The application includes a health check endpoint accessible at <code>/healthz</code> that monitors:</p> <ul> <li>System resources (CPU, memory, disk)</li> <li>Application state</li> <li>Component health</li> </ul>"},{"location":"ci-cd/overview/#monitoring-dashboards","title":"Monitoring Dashboards","text":"<ul> <li>GitHub Actions: Pipeline status and history</li> <li>SonarCloud: Code quality metrics</li> <li>Streamlit Cloud: Application metrics</li> </ul>"},{"location":"ci-cd/overview/#branching-strategy","title":"\ud83d\udd04 Branching Strategy","text":""},{"location":"ci-cd/overview/#git-flow","title":"Git Flow","text":"<ul> <li><code>main</code>: Production-ready code</li> <li><code>develop</code>: Integration branch for features</li> <li><code>feature/*</code>: Feature development</li> <li><code>hotfix/*</code>: Production hotfixes</li> <li><code>release/*</code>: Release preparation</li> </ul>"},{"location":"ci-cd/overview/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create feature branch from <code>develop</code></li> <li>Implement changes with tests</li> <li>Ensure all CI checks pass</li> <li>Request review from team members</li> <li>Merge to <code>develop</code> after approval</li> <li>Deploy to staging for testing</li> <li>Merge to <code>main</code> for production deployment</li> </ol>"},{"location":"ci-cd/overview/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"ci-cd/overview/#common-issues","title":"Common Issues","text":""},{"location":"ci-cd/overview/#pipeline-failures","title":"Pipeline Failures","text":"<ol> <li>Test Failures</li> <li>Check test logs in GitHub Actions</li> <li>Run tests locally to reproduce</li> <li> <p>Fix failing tests and push changes</p> </li> <li> <p>Security Scan Failures</p> </li> <li>Review security report artifacts</li> <li>Update vulnerable dependencies</li> <li> <p>Add security exceptions if needed</p> </li> <li> <p>Deployment Failures</p> </li> <li>Check deployment logs</li> <li>Verify environment variables</li> <li>Test health check endpoint</li> </ol>"},{"location":"ci-cd/overview/#local-development-issues","title":"Local Development Issues","text":"<ol> <li> <p>Import Errors <pre><code>pip install -r requirements.txt\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Pre-commit Hook Failures <pre><code>pre-commit run --all-files\n</code></pre></p> </li> <li> <p>Docker Build Issues <pre><code>docker system prune\ndocker build --no-cache -t campus-management .\n</code></pre></p> </li> </ol>"},{"location":"ci-cd/overview/#performance-optimization","title":"\ud83d\udcc8 Performance Optimization","text":""},{"location":"ci-cd/overview/#benchmarking","title":"Benchmarking","text":"<p>Performance benchmarks are automatically run in CI/CD: - Function execution time - Memory usage - Load testing results</p>"},{"location":"ci-cd/overview/#optimization-guidelines","title":"Optimization Guidelines","text":"<ol> <li>Code Performance</li> <li>Use pandas vectorized operations</li> <li>Implement caching where appropriate</li> <li> <p>Optimize database queries</p> </li> <li> <p>Streamlit Performance</p> </li> <li>Use <code>@st.cache_data</code> for expensive computations</li> <li>Minimize re-runs with proper session state</li> <li>Optimize data loading</li> </ol>"},{"location":"ci-cd/overview/#security","title":"\ud83d\udd10 Security","text":""},{"location":"ci-cd/overview/#security-measures","title":"Security Measures","text":"<ol> <li>Static Analysis</li> <li>Bandit security linting</li> <li>Safety vulnerability checking</li> <li> <p>CodeQL analysis</p> </li> <li> <p>Dependency Security</p> </li> <li>Automated dependency updates</li> <li>Vulnerability scanning</li> <li> <p>License compliance checking</p> </li> <li> <p>Container Security</p> </li> <li>Non-root user execution</li> <li>Minimal base images</li> <li>Security scanning with Trivy</li> </ol>"},{"location":"ci-cd/overview/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Streamlit Documentation</li> <li>GitHub Actions Documentation</li> <li>Docker Best Practices</li> <li>Python Testing Best Practices</li> </ul>"},{"location":"ci-cd/overview/#contributing","title":"\ud83e\udd1d Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all CI checks pass</li> <li>Submit a pull request</li> </ol>"},{"location":"ci-cd/overview/#support","title":"\ud83d\udcde Support","text":"<p>For questions or issues with the CI/CD pipeline:</p> <ol> <li>Check the Issues page</li> <li>Review pipeline logs in GitHub Actions</li> <li>Contact the development team</li> </ol> <p>Last Updated: October 2025 Pipeline Version: 1.0.0</p>"},{"location":"ci-cd/uv-guide/","title":"\ud83c\udfaf UV Command Cheat Sheet","text":""},{"location":"ci-cd/uv-guide/#the-issue-you-encountered","title":"The Issue You Encountered","text":"<p>When you ran <code>uv sync</code>, it was looking for a different project structure because: - <code>uv sync</code> is for projects with <code>uv.lock</code> files (fully uv-managed projects) - Your project uses traditional <code>pyproject.toml</code> with pip-style dependency management</p>"},{"location":"ci-cd/uv-guide/#correct-commands-for-your-setup","title":"\u2705 Correct Commands for Your Setup","text":""},{"location":"ci-cd/uv-guide/#virtual-environment","title":"Virtual Environment","text":"<pre><code># Create venv (if needed)\nuv venv .venv\n\n# Activate manually (optional)\nsource .venv/bin/activate\n</code></pre>"},{"location":"ci-cd/uv-guide/#installing-dependencies","title":"Installing Dependencies","text":"<pre><code># Production dependencies\nuv pip install --python .venv/bin/python -e .\n\n# Development dependencies (recommended)\nuv pip install --python .venv/bin/python -e \".[dev]\"\n\n# Specific groups\nuv pip install --python .venv/bin/python -e \".[test]\"\nuv pip install --python .venv/bin/python -e \".[security]\"\n</code></pre>"},{"location":"ci-cd/uv-guide/#running-commands","title":"Running Commands","text":"<pre><code># Run Streamlit app\nuv run --python .venv/bin/python streamlit run app.py\n\n# Run tests\nuv run --python .venv/bin/python pytest\n\n# Run with specific dependencies\nuv run --python .venv/bin/python --with pytest pytest tests/\n</code></pre>"},{"location":"ci-cd/uv-guide/#using-make-recommended","title":"Using Make (Recommended)","text":"<pre><code>make install-dev    # Install dev dependencies\nmake run           # Run the app\nmake test          # Run tests\nmake uv-run        # Run app with uv\nmake uv-test       # Run tests with uv\n</code></pre>"},{"location":"ci-cd/uv-guide/#alternative-full-uv-project","title":"\ud83d\udd04 Alternative: Full UV Project","text":"<p>If you want to use <code>uv sync</code>, convert to full uv management:</p> <pre><code># Initialize uv project (creates uv.lock)\nuv init --python 3.12\n\n# Then you can use\nuv sync           # Install dependencies from lock file\nuv run app.py     # Run commands\nuv add package    # Add dependencies\n</code></pre>"},{"location":"ci-cd/uv-guide/#your-current-workflow","title":"\ud83c\udfaf Your Current Workflow","text":"<p>Recommended approach for your project: 1. Use <code>make install-dev</code> (easiest) 2. Use <code>make run</code> to start the app 3. Use <code>make test</code> for testing 4. Use <code>./setup-dev.sh</code> for first-time setup</p> <p>The key insight: Always specify <code>--python .venv/bin/python</code> when using <code>uv pip</code> commands to ensure it uses your local virtual environment!</p>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>We love contributions! This guide will help you get started with contributing to the Campus Event &amp; Student Service Management System.</p>"},{"location":"development/contributing/#quick-start-for-contributors","title":"\ud83d\ude80 Quick Start for Contributors","text":""},{"location":"development/contributing/#1-fork-clone","title":"1. Fork &amp; Clone","text":"<pre><code># Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/YOUR-USERNAME/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n\n# Add upstream remote\ngit remote add upstream https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\n</code></pre>"},{"location":"development/contributing/#2-set-up-development-environment","title":"2. Set Up Development Environment","text":"<pre><code># Run our automated setup\n./setup-dev.sh\n\n# Or manual setup\nuv venv .venv\nsource .venv/bin/activate\nuv pip install --python .venv/bin/python -e \".[dev]\"\npre-commit install\n</code></pre>"},{"location":"development/contributing/#3-create-feature-branch","title":"3. Create Feature Branch","text":"<pre><code># Sync with upstream\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#types-of-contributions","title":"\ud83d\udccb Types of Contributions","text":""},{"location":"development/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Please help us fix it!</p> <ol> <li>Check existing issues</li> <li>Use our bug report template</li> <li>Include:</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior  </li> <li>Screenshots if applicable</li> <li>Environment details</li> </ol>"},{"location":"development/contributing/#feature-requests","title":"\u2728 Feature Requests","text":"<p>Have an idea for improvement?</p> <ol> <li>Check existing feature requests</li> <li>Use our feature request template</li> <li>Describe:</li> <li>The problem you're solving</li> <li>Proposed solution</li> <li>Alternative solutions considered</li> </ol>"},{"location":"development/contributing/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<p>Ready to write some code?</p>"},{"location":"development/contributing/#areas-we-need-help","title":"Areas We Need Help","text":"<ul> <li>Frontend Improvements: Streamlit UI/UX enhancements</li> <li>Data Visualization: New chart types and analytics</li> <li>Performance: Optimization and caching</li> <li>Testing: More comprehensive test coverage</li> <li>Documentation: Examples, tutorials, API docs</li> <li>Accessibility: Making the app more accessible</li> <li>Internationalization: Multi-language support</li> </ul>"},{"location":"development/contributing/#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":""},{"location":"development/contributing/#1-code-quality-standards","title":"1. Code Quality Standards","text":"<p>We maintain high code quality standards:</p> <pre><code># Format code\nmake format\n\n# Run linting\nmake lint  \n\n# Run security checks\nmake security\n\n# Run all quality checks\nmake qa\n</code></pre>"},{"location":"development/contributing/#2-testing-requirements","title":"2. Testing Requirements","text":"<p>All contributions must include tests:</p> <pre><code># Run tests\nmake test\n\n# Run with coverage\nmake test-cov\n\n# Add new tests in tests/ directory\n# - tests/test_your_feature.py for unit tests\n# - tests/test_integration_your_feature.py for integration tests\n</code></pre>"},{"location":"development/contributing/#3-commit-guidelines","title":"3. Commit Guidelines","text":"<p>We follow Conventional Commits:</p> <pre><code># Examples\ngit commit -m \"feat: add student batch import functionality\"\ngit commit -m \"fix: resolve event conflict detection bug\"\ngit commit -m \"docs: update installation guide\"\ngit commit -m \"test: add tests for service request validation\"\n</code></pre> <p>Commit Types: - <code>feat:</code> - New features - <code>fix:</code> - Bug fixes - <code>docs:</code> - Documentation changes - <code>test:</code> - Test additions/changes - <code>refactor:</code> - Code refactoring - <code>style:</code> - Code style changes - <code>chore:</code> - Maintenance tasks - <code>ci:</code> - CI/CD changes</p>"},{"location":"development/contributing/#4-pull-request-process","title":"4. Pull Request Process","text":""},{"location":"development/contributing/#before-submitting","title":"Before Submitting","text":"<pre><code># Ensure your branch is up to date\ngit fetch upstream\ngit rebase upstream/main\n\n# Run full quality checks\nmake ci-local\n\n# Push to your fork\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#pull-request-template","title":"Pull Request Template","text":"<p>When creating a PR, use our template and include:</p> <ul> <li>Description: What does this PR do?</li> <li>Issue Link: Fixes #123</li> <li>Type of Change: Bug fix, feature, docs, etc.</li> <li>Testing: How was this tested?</li> <li>Screenshots: For UI changes</li> <li>Breaking Changes: Any breaking changes?</li> </ul>"},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (CI/CD pipeline)</li> <li>At least one maintainer review required</li> <li>Code quality standards met</li> <li>Tests pass and coverage maintained</li> <li>Documentation updated if needed</li> </ol>"},{"location":"development/contributing/#development-guidelines","title":"\ud83c\udfaf Development Guidelines","text":""},{"location":"development/contributing/#code-style","title":"Code Style","text":"<ul> <li>Python: Follow PEP 8, enforced by Black and flake8</li> <li>Line Length: 88 characters (Black default)</li> <li>Imports: Sorted with isort</li> <li>Type Hints: Use type hints where beneficial</li> <li>Docstrings: Follow Google style for public APIs</li> </ul>"},{"location":"development/contributing/#architecture-patterns","title":"Architecture Patterns","text":"<ul> <li>Separation of Concerns: Keep UI, logic, and data separate</li> <li>Single Responsibility: Each function/class has one job</li> <li>DRY Principle: Don't repeat yourself</li> <li>Error Handling: Use proper exception handling</li> <li>Logging: Use appropriate logging levels</li> </ul>"},{"location":"development/contributing/#streamlit-best-practices","title":"Streamlit Best Practices","text":"<ul> <li>Session State: Use for data persistence</li> <li>Caching: Use <code>@st.cache_data</code> for expensive operations</li> <li>Performance: Minimize re-runs with proper state management</li> <li>User Experience: Clear error messages and loading states</li> </ul>"},{"location":"development/contributing/#documentation-standards","title":"\ud83d\udcda Documentation Standards","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<pre><code>def add_student(student_id: str, name: str, email: str, major: str) -&gt; str:\n    \"\"\"Add a new student to the system.\n\n    Args:\n        student_id: Unique identifier for the student\n        name: Full name of the student\n        email: Contact email address\n        major: Student's field of study\n\n    Returns:\n        Success message or error description\n\n    Raises:\n        ValueError: If student_id already exists\n\n    Example:\n        &gt;&gt;&gt; result = add_student(\"STU001\", \"John Doe\", \"john@edu\", \"CS\")\n        &gt;&gt;&gt; print(result)\n        \"Student added successfully!\"\n    \"\"\"\n</code></pre>"},{"location":"development/contributing/#documentation-files","title":"Documentation Files","text":"<ul> <li>Keep docs up to date with code changes</li> <li>Use Markdown with MkDocs Material extensions</li> <li>Include code examples and screenshots</li> <li>Test documentation locally: <code>make docs-serve</code></li> </ul>"},{"location":"development/contributing/#testing-guidelines","title":"\ud83e\uddea Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_models.py          # Unit tests for data models\n\u251c\u2500\u2500 test_system.py          # Unit tests for core system\n\u251c\u2500\u2500 test_integration.py     # Integration tests\n\u251c\u2500\u2500 test_performance.py     # Performance benchmarks\n\u2514\u2500\u2500 conftest.py            # Test configuration\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>import pytest\nfrom main import CampusEventManagementSystem\n\nclass TestStudentManagement:\n    def test_add_student_success(self, system):\n        \"\"\"Test successful student addition.\"\"\"\n        result = system.add_student(\"STU001\", \"John Doe\", \"john@edu\", \"CS\")\n        assert result == \"Student added successfully!\"\n        assert len(system.students) == 1\n\n    def test_add_duplicate_student_fails(self, system):\n        \"\"\"Test that adding duplicate student fails.\"\"\"\n        system.add_student(\"STU001\", \"John Doe\", \"john@edu\", \"CS\")\n        result = system.add_student(\"STU001\", \"Jane Doe\", \"jane@edu\", \"Math\")\n        assert \"already exists\" in result.lower()\n</code></pre>"},{"location":"development/contributing/#cicd-pipeline","title":"\ud83d\udea6 CI/CD Pipeline","text":"<p>Our automated pipeline runs on every PR:</p> <ol> <li>Code Quality: Black, isort, flake8, mypy, pylint</li> <li>Security: Bandit, Safety, CodeQL</li> <li>Testing: pytest with coverage reporting</li> <li>Performance: Benchmark tests</li> <li>Documentation: MkDocs build verification</li> </ol>"},{"location":"development/contributing/#local-ci-simulation","title":"Local CI Simulation","text":"<pre><code># Run the same checks as CI\nmake ci-local\n\n# Individual checks\nmake format lint security test-cov\n</code></pre>"},{"location":"development/contributing/#getting-help","title":"\ud83c\udfaf Getting Help","text":""},{"location":"development/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>Issues: For bug reports and feature requests</li> <li>Discussions: For questions and general discussion</li> <li>PR Comments: For code review discussions</li> </ul>"},{"location":"development/contributing/#maintainer-response-times","title":"Maintainer Response Times","text":"<ul> <li>Issues: Within 2-3 business days</li> <li>PRs: Within 1-2 business days for initial review</li> <li>Security Issues: Within 24 hours</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Provide constructive feedback</li> <li>Help others learn and grow</li> <li>Follow our community guidelines</li> </ul>"},{"location":"development/contributing/#recognition","title":"\ud83c\udfc6 Recognition","text":"<p>Contributors are recognized in: - README contributors section - Release notes for significant contributions - Special recognition for first-time contributors - Maintainer status for long-term contributors</p>"},{"location":"development/contributing/#checklist-for-contributors","title":"\ud83d\udccb Checklist for Contributors","text":"<p>Before submitting a PR, ensure:</p> <ul> <li> Code follows project style guidelines</li> <li> Tests are written and passing</li> <li> Documentation is updated</li> <li> Commit messages follow conventional format</li> <li> PR description is complete</li> <li> No merge conflicts with main branch</li> <li> CI/CD pipeline passes</li> </ul>"},{"location":"development/contributing/#release-process","title":"\ud83d\ude80 Release Process","text":"<p>For maintainers:</p> <ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code></li> <li>Create release PR</li> <li>Tag release after merge</li> <li>GitHub Actions handles deployment</li> </ol> <p>Thank you for contributing! Every contribution, no matter how small, helps make this project better. \ud83d\ude4f</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the Campus Event &amp; Student Service Management System, ensure you have:</p> <ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>UV package manager (recommended) or pip</li> </ul>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>OS: macOS, Linux, or Windows</li> <li>Python: 3.11+</li> <li>Memory: 512MB minimum, 1GB recommended</li> <li>Storage: 100MB for application + dependencies</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-automated-setup-recommended","title":"Method 1: Automated Setup (Recommended)","text":"<p>The easiest way to get started is using our automated setup script:</p> <pre><code># Clone the repository\ngit clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n\n# Run automated setup\n./setup-dev.sh\n</code></pre> <p>This script will:</p> <ul> <li>Install UV if not present</li> <li>Create a virtual environment</li> <li>Install all dependencies</li> <li>Set up pre-commit hooks</li> <li>Run initial tests</li> </ul>"},{"location":"getting-started/installation/#method-2-manual-installation-with-uv","title":"Method 2: Manual Installation with UV","text":"<p>If you prefer manual control:</p> <pre><code># Clone repository\ngit clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n\n# Create virtual environment\nuv venv .venv\n\n# Install dependencies\nuv pip install --python .venv/bin/python -e \".[dev]\"\n\n# Activate environment\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#method-3-using-pip","title":"Method 3: Using pip","text":"<p>For traditional pip users:</p> <pre><code># Clone repository\ngit clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#method-4-docker-installation","title":"Method 4: Docker Installation","text":"<p>For containerized deployment:</p> <pre><code># Clone repository\ngit clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n\n# Build and run with Docker Compose\ndocker-compose up --build\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation, verify everything works:</p>"},{"location":"getting-started/installation/#1-check-installation","title":"1. Check Installation","text":"<pre><code># Activate environment\nsource .venv/bin/activate\n\n# Check Python version\npython --version\n\n# Check installed packages\npip list | grep -E \"(streamlit|pandas|plotly)\"\n</code></pre>"},{"location":"getting-started/installation/#2-run-tests","title":"2. Run Tests","text":"<pre><code># Run test suite\nmake test\n# or\npython -m pytest tests/ -v\n</code></pre>"},{"location":"getting-started/installation/#3-start-application","title":"3. Start Application","text":"<pre><code># Start Streamlit app\nmake run\n# or\npython -m streamlit run app.py\n</code></pre> <p>The application should open in your browser at <code>http://localhost:8501</code>.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#uv-installation-issues","title":"UV Installation Issues","text":"<pre><code># Install UV manually\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nsource $HOME/.cargo/env\n</code></pre>"},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# Install Python 3.11+ if needed (macOS with Homebrew)\nbrew install python@3.11\n</code></pre>"},{"location":"getting-started/installation/#permission-issues-linuxmacos","title":"Permission Issues (Linux/macOS)","text":"<pre><code># Make scripts executable\nchmod +x setup-dev.sh activate.sh qa.sh\n</code></pre>"},{"location":"getting-started/installation/#windows-specific-issues","title":"Windows-specific Issues","text":"<pre><code># Use PowerShell equivalent for activation\n.venv\\Scripts\\Activate.ps1\n\n# Or Command Prompt\n.venv\\Scripts\\activate.bat\n</code></pre>"},{"location":"getting-started/installation/#environment-issues","title":"Environment Issues","text":"<p>If you encounter environment-related issues:</p> <pre><code># Clean environment\nrm -rf .venv\nrm -rf __pycache__\nrm -rf *.egg-info\n\n# Reinstall\n./setup-dev.sh\n</code></pre>"},{"location":"getting-started/installation/#development-dependencies","title":"Development Dependencies","text":"<p>The development installation includes:</p> <ul> <li>Testing: pytest, pytest-cov, pytest-html</li> <li>Code Quality: black, isort, flake8, mypy, pylint  </li> <li>Security: bandit, safety</li> <li>Documentation: mkdocs, mkdocs-material</li> <li>Performance: locust, memory-profiler</li> </ul>"},{"location":"getting-started/installation/#production-installation","title":"Production Installation","text":"<p>For production deployment, install only core dependencies:</p> <pre><code>uv pip install --python .venv/bin/python -e .\n</code></pre> <p>This installs only: - streamlit - pandas - plotly - psutil - python-dotenv - requests</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Quick Start Guide</li> <li>Configuration</li> <li>Development Setup</li> </ol>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get the Campus Event &amp; Student Service Management System running in minutes!</p>"},{"location":"getting-started/quick-start/#launch-in-3-steps","title":"\ud83d\ude80 Launch in 3 Steps","text":""},{"location":"getting-started/quick-start/#step-1-get-the-code","title":"Step 1: Get the Code","text":"<pre><code>git clone https://github.com/0Tarun0709/Campus-Event-Student-Service-Management.git\ncd Campus-Event-Student-Service-Management\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-setup-environment","title":"Step 2: Setup Environment","text":"<pre><code>./setup-dev.sh\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-run-the-app","title":"Step 3: Run the App","text":"<pre><code>make run\n</code></pre> <p>That's it! The application will open at <code>http://localhost:8501</code> \ud83c\udf89</p>"},{"location":"getting-started/quick-start/#first-use-walkthrough","title":"\ud83c\udfaf First Use Walkthrough","text":""},{"location":"getting-started/quick-start/#1-dashboard-overview","title":"1. Dashboard Overview","text":"<p>When you first open the application, you'll see the Dashboard with:</p> <ul> <li>Student Count: Total registered students</li> <li>Event Count: Scheduled events</li> <li>Registration Metrics: Event participation data</li> <li>Service Request Stats: Pending and resolved requests</li> </ul>"},{"location":"getting-started/quick-start/#2-add-your-first-student","title":"2. Add Your First Student","text":"<ol> <li>Navigate to \"Manage Students\" in the sidebar</li> <li>Fill in the student information:</li> <li>Student ID: Unique identifier (e.g., \"STU001\")</li> <li>Name: Full name</li> <li>Email: Contact email</li> <li>Major: Field of study</li> <li>Click \"Add Student\"</li> </ol> <p>Pro Tip</p> <p>Use a consistent ID format like \"STU001\", \"STU002\" for easy management.</p>"},{"location":"getting-started/quick-start/#3-create-your-first-event","title":"3. Create Your First Event","text":"<ol> <li>Go to \"Manage Events\"</li> <li>Enter event details:</li> <li>Event ID: Unique identifier (e.g., \"EVT001\")</li> <li>Title: Event name</li> <li>Club: Organizing club/department</li> <li>Date: Event date (YYYY-MM-DD format)</li> <li>Start/End Time: Time range</li> <li>Venue: Location</li> <li>Max Seats: Capacity limit</li> <li>Click \"Add Event\"</li> </ol> <p>Conflict Detection</p> <p>The system automatically checks for venue and time conflicts!</p>"},{"location":"getting-started/quick-start/#4-register-students-for-events","title":"4. Register Students for Events","text":"<ol> <li>In \"Manage Events\", find your event</li> <li>Use the registration section</li> <li>Enter the Student ID</li> <li>Click \"Register Student\"</li> </ol> <p>The system will: - \u2705 Validate student exists - \u2705 Check for duplicates - \u2705 Manage waitlists if full</p>"},{"location":"getting-started/quick-start/#5-track-service-requests","title":"5. Track Service Requests","text":"<ol> <li>Navigate to \"Manage Service Requests\"</li> <li>Create a new request:</li> <li>Student ID: Requesting student</li> <li>Service Type: Category (IT Support, Library Access, etc.)</li> <li>Description: Detailed request</li> <li>Priority: High, Medium, or Low</li> <li>Monitor status changes</li> </ol>"},{"location":"getting-started/quick-start/#sample-data-walkthrough","title":"\ud83d\udcca Sample Data Walkthrough","text":"<p>Let's create some sample data to explore features:</p> StudentsEventsService Requests <pre><code>STU001 | Alice Johnson    | alice@college.edu    | Computer Science\nSTU002 | Bob Smith        | bob@college.edu      | Mathematics  \nSTU003 | Carol Williams   | carol@college.edu    | Physics\nSTU004 | David Brown      | david@college.edu    | Engineering\n</code></pre> <pre><code>EVT001 | AI Workshop      | Tech Club     | 2025-11-15 | 10:00-12:00 | Lab A | 25\nEVT002 | Math Symposium   | Math Society  | 2025-11-16 | 14:00-16:00 | Hall B | 100\nEVT003 | Career Fair      | Career Center | 2025-11-20 | 09:00-17:00 | Gym | 200\n</code></pre> <pre><code>STU001 | IT Support       | Laptop repair needed        | High\nSTU002 | Library Access   | Need extended hours pass    | Medium\nSTU003 | Academic Advising| Course selection help       | Low\n</code></pre>"},{"location":"getting-started/quick-start/#common-operations","title":"\ud83d\udd27 Common Operations","text":""},{"location":"getting-started/quick-start/#view-analytics","title":"View Analytics","text":"<ol> <li>Go to \"Reports &amp; Analytics\"</li> <li>Explore:</li> <li>Event participation trends</li> <li>Student engagement metrics</li> <li>Service request patterns</li> <li>Popular events and venues</li> </ol>"},{"location":"getting-started/quick-start/#export-data","title":"Export Data","text":"<ol> <li>In any management tab, look for export options</li> <li>Download data as CSV or Excel</li> <li>Use for external reporting or backup</li> </ol>"},{"location":"getting-started/quick-start/#manage-registrations","title":"Manage Registrations","text":"<ul> <li>View Registrations: See who's registered for each event</li> <li>Cancel Registration: Remove students from events</li> <li>Waitlist Management: Handle overbooked events</li> </ul>"},{"location":"getting-started/quick-start/#configuration-tips","title":"\u2699\ufe0f Configuration Tips","text":""},{"location":"getting-started/quick-start/#environment-settings","title":"Environment Settings","text":"<p>Create <code>.env</code> file for customization: <pre><code># Application Settings\nSTREAMLIT_SERVER_PORT=8501\nDEBUG=true\n\n# Feature Flags\nENABLE_ANALYTICS=true\nENABLE_EXPORT=true\n</code></pre></p>"},{"location":"getting-started/quick-start/#sample-data-loading","title":"Sample Data Loading","text":"<p>Load sample data quickly: <pre><code># In the Streamlit app, use the sample data loader\n# Available in the sidebar: \"Load Sample Data\"\n</code></pre></p>"},{"location":"getting-started/quick-start/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"getting-started/quick-start/#app-wont-start","title":"App Won't Start?","text":"<pre><code># Check Python version\npython --version  # Should be 3.11+\n\n# Reinstall dependencies\nmake install-dev\n\n# Check for errors\nmake test\n</code></pre>"},{"location":"getting-started/quick-start/#port-already-in-use","title":"Port Already in Use?","text":"<pre><code># Use different port\nstreamlit run app.py --server.port 8502\n</code></pre>"},{"location":"getting-started/quick-start/#import-errors","title":"Import Errors?","text":"<pre><code># Ensure virtual environment is activated\nsource .venv/bin/activate\n\n# Reinstall in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/quick-start/#interface-overview","title":"\ud83d\udcf1 Interface Overview","text":"<pre><code>graph LR\n    A[Sidebar Navigation] --&gt; B[Dashboard]\n    A --&gt; C[Manage Students]\n    A --&gt; D[Manage Events] \n    A --&gt; E[Service Requests]\n    A --&gt; F[Analytics]\n\n    B --&gt; G[Metrics Display]\n    C --&gt; H[Student CRUD]\n    D --&gt; I[Event CRUD + Registration]\n    E --&gt; J[Request Management]\n    F --&gt; K[Charts &amp; Reports]</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Now that you're up and running:</p> <ol> <li>Configuration Guide - Customize the system</li> <li>User Guide - Detailed feature documentation</li> <li>Development Setup - If you want to contribute</li> <li>CI/CD Guide - Learn about our automation</li> </ol>"},{"location":"getting-started/quick-start/#pro-tips","title":"\ud83d\udca1 Pro Tips","text":"<p>Keyboard Shortcuts</p> <ul> <li><code>Ctrl+R</code> - Refresh the Streamlit app</li> <li>Use browser bookmarks for direct tab access</li> <li>Keep the browser developer tools open for debugging</li> </ul> <p>Best Practices</p> <ul> <li>Use consistent ID formats (STU001, EVT001, etc.)</li> <li>Regular backups via export functionality</li> <li>Monitor the Analytics dashboard for insights</li> <li>Set up proper venue capacity limits</li> </ul> <p>Common Gotchas</p> <ul> <li>Date format must be YYYY-MM-DD</li> <li>Student IDs are case-sensitive</li> <li>Venue conflicts prevent event creation</li> <li>Check browser console for JavaScript errors</li> </ul> <p>Ready to dive deeper? Check out our detailed user guides!</p>"}]}
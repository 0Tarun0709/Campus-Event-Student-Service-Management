name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip uv
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"
        
    - name: Run Black formatting check
      run: |
        source .venv/bin/activate
        python -m black --check --diff . || (echo "Code is not formatted. Run 'black .' to fix." && exit 1)
        
    - name: Run isort import sorting check
      run: |
        source .venv/bin/activate
        python -m isort --check-only --diff . || (echo "Imports are not sorted. Run 'isort .' to fix." && exit 1)
        
    - name: Run flake8 linting
      run: |
        source .venv/bin/activate
        python -m flake8 . --statistics --tee --output-file=flake8-report.txt
        
    - name: Run pylint
      run: |
        pylint **/*.py --output-format=json > pylint-report.json || true
        
    - name: Run mypy type checking
      run: |
        mypy . --ignore-missing-imports --junit-xml mypy-report.xml || true
        
    - name: Run bandit security linting
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run safety vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
        
    - name: Upload reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          pylint-report.json
          mypy-report.xml
          bandit-report.json
          safety-report.json
          
    - name: Comment PR with quality results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ðŸ“Š Code Quality Report\n\n';
          
          // Add flake8 results if available
          try {
            const flake8 = fs.readFileSync('flake8-report.txt', 'utf8');
            comment += '### Flake8 Linting\n```\n' + flake8 + '\n```\n\n';
          } catch (e) {}
          
          // Add other reports as needed
          comment += 'âœ… Code quality checks completed. Check the Actions tab for detailed reports.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
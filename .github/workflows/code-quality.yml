name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
        
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        
    - name: Run Black formatting check
      id: black
      run: |
        echo "Running Black formatter check..."
        python -m black --check --diff . > black-report.txt 2>&1 || true
        if python -m black --check . > /dev/null 2>&1; then
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Run isort import sorting check
      id: isort
      run: |
        echo "Running isort import check..."
        python -m isort --check-only --diff . > isort-report.txt 2>&1 || true
        if python -m isort --check-only . > /dev/null 2>&1; then
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Run flake8 linting
      id: flake8
      run: |
        echo "Running flake8 linter..."
        # Run flake8 and capture output
        python -m flake8 . --statistics > flake8-report.txt 2>&1 || true
        # Count issues more reliably
        ISSUES=$(python -m flake8 . --count 2>/dev/null || echo "0")
        # Clean up the count (remove any non-numeric characters)
        ISSUES=$(echo "$ISSUES" | grep -o '[0-9]*' | head -1 || echo "0")
        echo "issues=$ISSUES" >> $GITHUB_OUTPUT
        if [ "$ISSUES" = "0" ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        # Copy report for summary
        cp flake8-report.txt flake8-summary.txt
        
    - name: Run pylint
      id: pylint
      run: |
        echo "Running pylint..."
        python -m pylint **/*.py --output-format=json > pylint-report.json 2>&1 || true
        python -m pylint **/*.py --output-format=text > pylint-summary.txt 2>&1 || true
        # Extract score
        SCORE=$(grep "rated at" pylint-summary.txt | grep -oE '[0-9]+\.[0-9]+' | head -1 || echo "0.0")
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        
    - name: Run mypy type checking
      id: mypy
      run: |
        echo "Running mypy type checker..."
        python -m mypy . --ignore-missing-imports --junit-xml mypy-report.xml > mypy-summary.txt 2>&1 || true
        # Count errors
        ERRORS=$(grep -c "error:" mypy-summary.txt 2>/dev/null || echo "0")
        echo "errors=$ERRORS" >> $GITHUB_OUTPUT
        
    - name: Run bandit security linting
      id: bandit
      run: |
        echo "Running bandit security scanner..."
        # Run bandit with JSON output, excluding test files and common false positives
        python -m bandit -r . -f json -o bandit-report.json --skip B101,B601 --exclude ./tests/ 2>/dev/null || true
        # Run bandit with text output for parsing
        python -m bandit -r . --skip B101,B601 --exclude ./tests/ > bandit-summary.txt 2>/dev/null || true
        # Count issues by severity (more robust parsing)
        HIGH=$(grep -i "severity.*high" bandit-summary.txt | wc -l || echo "0")
        MEDIUM=$(grep -i "severity.*medium" bandit-summary.txt | wc -l || echo "0") 
        LOW=$(grep -i "severity.*low" bandit-summary.txt | wc -l || echo "0")
        echo "high=$HIGH" >> $GITHUB_OUTPUT
        echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
        echo "low=$LOW" >> $GITHUB_OUTPUT
        
    - name: Run safety vulnerability check
      id: safety
      run: |
        echo "Running safety vulnerability scanner..."
        # Run safety with JSON output
        python -m safety check --json --output safety-report.json 2>/dev/null || true
        # Run safety with text output for parsing
        python -m safety check > safety-text.txt 2>/dev/null || true
        # Count vulnerabilities more reliably
        VULNS=$(grep -c "vulnerability\|VULNERABILITY" safety-text.txt 2>/dev/null || echo "0")
        # Also try counting from JSON if available
        if [ -f "safety-report.json" ]; then
          JSON_VULNS=$(python3 -c "import json; data=json.load(open('safety-report.json')); print(len(data.get('vulnerabilities', [])))" 2>/dev/null || echo "0")
          if [ "$JSON_VULNS" != "0" ]; then
            VULNS=$JSON_VULNS
          fi
        fi
        echo "vulnerabilities=$VULNS" >> $GITHUB_OUTPUT
        # Create summary file
        cp safety-text.txt safety-summary.txt
        
    - name: Upload reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          flake8-summary.txt
          black-report.txt
          isort-report.txt
          pylint-report.json
          pylint-summary.txt
          mypy-report.xml
          mypy-summary.txt
          bandit-report.json
          bandit-summary.txt
          safety-report.json
          safety-text.txt
          
    - name: Comment PR with quality results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let comment = '## 📊 Code Quality Report\n\n';
          
          // Summary table
          comment += '### Summary\n\n';
          comment += '| Tool | Status | Details |\n';
          comment += '|------|--------|----------|\n';
          
          // Black
          const blackStatus = '${{ steps.black.outputs.status }}';
          comment += `| 🎨 Black | ${blackStatus === 'passed' ? '✅ Passed' : '❌ Failed'} | Code formatting |\n`;
          
          // isort
          const isortStatus = '${{ steps.isort.outputs.status }}';
          comment += `| 📦 isort | ${isortStatus === 'passed' ? '✅ Passed' : '❌ Failed'} | Import sorting |\n`;
          
          // flake8
          const flake8Issues = '${{ steps.flake8.outputs.issues }}';
          const flake8Status = '${{ steps.flake8.outputs.status }}';
          comment += `| 🔍 flake8 | ${flake8Status === 'passed' ? '✅ Passed' : '⚠️ ' + flake8Issues + ' issues'} | Code linting |\n`;
          
          // pylint
          const pylintScore = '${{ steps.pylint.outputs.score }}';
          const pylintEmoji = parseFloat(pylintScore) >= 8.0 ? '✅' : parseFloat(pylintScore) >= 6.0 ? '⚠️' : '❌';
          comment += `| 📝 pylint | ${pylintEmoji} ${pylintScore}/10 | Code quality |\n`;
          
          // mypy
          const mypyErrors = '${{ steps.mypy.outputs.errors }}';
          comment += `| 🔎 mypy | ${mypyErrors === '0' ? '✅ Passed' : '⚠️ ' + mypyErrors + ' errors'} | Type checking |\n`;
          
          // bandit
          const banditHigh = '${{ steps.bandit.outputs.high }}';
          const banditMedium = '${{ steps.bandit.outputs.medium }}';
          const banditLow = '${{ steps.bandit.outputs.low }}';
          const banditTotal = parseInt(banditHigh) + parseInt(banditMedium) + parseInt(banditLow);
          comment += `| 🔒 bandit | ${banditTotal === 0 ? '✅ Passed' : '⚠️ ' + banditTotal + ' issues'} | Security: ${banditHigh}H ${banditMedium}M ${banditLow}L |\n`;
          
          // safety
          const safetyVulns = '${{ steps.safety.outputs.vulnerabilities }}';
          comment += `| 🛡️ safety | ${safetyVulns === '0' ? '✅ Passed' : '❌ ' + safetyVulns + ' vulnerabilities'} | Dependency check |\n`;
          
          comment += '\n---\n\n';
          
          // Detailed flake8 report
          if (flake8Status !== 'passed') {
            try {
              const flake8Report = fs.readFileSync('flake8-report.txt', 'utf8');
              if (flake8Report.trim()) {
                comment += '### 🔍 Flake8 Details\n';
                comment += '<details><summary>Click to expand</summary>\n\n';
                comment += '```\n' + flake8Report.substring(0, 2000) + '\n```\n';
                comment += '</details>\n\n';
              }
            } catch (e) {}
          }
          
          // Detailed Black report
          if (blackStatus !== 'passed') {
            try {
              const blackReport = fs.readFileSync('black-report.txt', 'utf8');
              if (blackReport.trim()) {
                comment += '### 🎨 Black Formatting Issues\n';
                comment += '<details><summary>Click to expand</summary>\n\n';
                comment += '```diff\n' + blackReport.substring(0, 2000) + '\n```\n';
                comment += '</details>\n\n';
              }
            } catch (e) {}
          }
          
          // Detailed isort report
          if (isortStatus !== 'passed') {
            try {
              const isortReport = fs.readFileSync('isort-report.txt', 'utf8');
              if (isortReport.trim()) {
                comment += '### 📦 Import Sorting Issues\n';
                comment += '<details><summary>Click to expand</summary>\n\n';
                comment += '```diff\n' + isortReport.substring(0, 2000) + '\n```\n';
                comment += '</details>\n\n';
              }
            } catch (e) {}
          }
          
          // Detailed pylint summary
          try {
            const pylintSummary = fs.readFileSync('pylint-summary.txt', 'utf8');
            const lastLines = pylintSummary.split('\n').slice(-15).join('\n');
            if (lastLines.trim()) {
              comment += '### 📝 Pylint Summary\n';
              comment += '<details><summary>Click to expand</summary>\n\n';
              comment += '```\n' + lastLines + '\n```\n';
              comment += '</details>\n\n';
            }
          } catch (e) {}
          
          // Detailed bandit report
          if (banditTotal > 0) {
            try {
              const banditSummary = fs.readFileSync('bandit-summary.txt', 'utf8');
              const lines = banditSummary.split('\n').slice(-30).join('\n');
              if (lines.trim()) {
                comment += '### 🔒 Bandit Security Issues\n';
                comment += '<details><summary>Click to expand</summary>\n\n';
                comment += '```\n' + lines + '\n```\n';
                comment += '</details>\n\n';
              }
            } catch (e) {}
          }
          
          comment += '\n📋 **Full reports available in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });